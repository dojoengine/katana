name: ci

on:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.83.0

jobs:
  fmt:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dojoengine/katana-runner:latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - run: scripts/rust_fmt.sh --check

  clippy:
    needs: fmt
    runs-on: ubuntu-latest-4-cores
    container:
      image: ghcr.io/dojoengine/katana-runner:latest
    env:
      MLIR_SYS_190_PREFIX: /usr/lib/llvm-19/
      LLVM_SYS_191_PREFIX: /usr/lib/llvm-19/
      TABLEGEN_190_PREFIX: /usr/lib/llvm-19/
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Run Clippy
        run: |
          make test-artifacts
          ./scripts/clippy.sh

  test:
    needs: [fmt, clippy]
    runs-on: ubuntu-latest-32-cores
    container:
      image: ghcr.io/dojoengine/katana-runner:latest
    env:
      MLIR_SYS_190_PREFIX: /usr/lib/llvm-19/
      LLVM_SYS_191_PREFIX: /usr/lib/llvm-19/
      TABLEGEN_190_PREFIX: /usr/lib/llvm-19/
      NEXTEST_PROFILE: ci
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2

      - name: Build Katana binary
        run: |
          cargo build --release --bin katana
          echo "$PWD/target/release" >> $GITHUB_PATH

      - name: Run tests
        run: |
          cargo llvm-cov nextest --no-report --all-features --workspace --exclude snos-integration-test --build-jobs 20
          cargo llvm-cov report --lcov --output-path lcov.info

      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info

  snos-integration-test:
    needs: [fmt, clippy]
    runs-on: ubuntu-latest-32-cores
    container:
      image: ghcr.io/dojoengine/katana-runner:latest
    env:
      MLIR_SYS_190_PREFIX: /usr/lib/llvm-19/
      LLVM_SYS_191_PREFIX: /usr/lib/llvm-19/
      TABLEGEN_190_PREFIX: /usr/lib/llvm-19/
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: Swatinem/rust-cache@v2

      - name: Prepare SNOS test environment
        run: |
          make snos-artifacts

      - run: |
          cargo run -p snos-integration-test
