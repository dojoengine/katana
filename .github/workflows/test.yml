name: ci

on:
  push:
    branches:
      - main
    paths:
      - "bin/**/*.rs"
      - "crates/**/*.rs"
      - ".github/workflows/test.yml"
  pull_request:
    types: [opened, synchronize, ready_for_review]
    paths:
      - "bin/**/*.rs"
      - "crates/**/*.rs"
      - ".github/workflows/test.yml"

# Cancel in progress workflow when a new one is triggered by running in a concurrency group
# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/control-the-concurrency-of-workflows-and-jobs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    container:
      image: ghcr.io/dojoengine/katana-dev:latest
    steps:
      - uses: actions/checkout@v3
      - run: scripts/rust_fmt.sh --check

  generate-test-artifacts:
    needs: [fmt]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    container:
      image: ghcr.io/dojoengine/katana-dev:latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      # Workaround for https://github.com/actions/runner-images/issues/6775
      - run: git config --global --add safe.directory "*"

      - name: Check if test artifacts need to be generated
        id: check-files
        run: |
          if [[ $(git diff --name-only HEAD^ | grep -q "^tests/snos/snos/") ]]; then
            echo "files_changed=true" >> $GITHUB_OUTPUT
          else
            echo "files_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Try to restore cached test artifacts
        id: cache
        uses: actions/cache@v3
        with:
          lookup-only: true
          key: test-artifacts
          path: |
            ./tests/snos/snos/build
            ./crates/contracts/build
            ./tests/fixtures/db/simple

      - name: Generate test artifacts
        if: steps.check-files.outputs.files_changed == 'true' || steps.cache.outputs.cache-hit != 'true'
        run: make test-artifacts

      - name: Cache test artifacts
        if: steps.check-files.outputs.files_changed == 'true' || steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          key: test-artifacts
          path: |
            ./tests/snos/snos/build
            ./crates/contracts/build
            ./tests/fixtures/db/simple

  clippy:
    needs: [generate-test-artifacts]
    runs-on: ubuntu-latest-4-cores
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    container:
      image: ghcr.io/dojoengine/katana-dev:latest
    env:
      MLIR_SYS_190_PREFIX: /usr/lib/llvm-19/
      LLVM_SYS_191_PREFIX: /usr/lib/llvm-19/
      TABLEGEN_190_PREFIX: /usr/lib/llvm-19/
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      # Workaround for https://github.com/actions/runner-images/issues/6775
      - run: git config --global --add safe.directory "*"

      - uses: Swatinem/rust-cache@v2
        with:
          key: ci-${{ github.job }}
          shared-key: katana-ci-cache

      - name: Restore test artifacts
        uses: actions/cache@v3
        with:
          path: |
            ./tests/snos/snos/build
            ./crates/contracts/build
            ./tests/fixtures/db/simple
          key: test-artifacts

      - name: Run Clippy
        run: ./scripts/clippy.sh

  test:
    needs: [fmt, clippy]
    runs-on: ubuntu-latest-32-cores
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    container:
      image: ghcr.io/dojoengine/katana-dev:rpc090rc2
    env:
      MLIR_SYS_190_PREFIX: /usr/lib/llvm-19/
      LLVM_SYS_191_PREFIX: /usr/lib/llvm-19/
      TABLEGEN_190_PREFIX: /usr/lib/llvm-19/
      NEXTEST_PROFILE: ci
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      # Workaround for https://github.com/actions/runner-images/issues/6775
      - run: git config --global --add safe.directory "*"

      - uses: Swatinem/rust-cache@v2
        with:
          key: ci-${{ github.job }}
          shared-key: katana-ci-cache

      - name: Restore test artifacts
        uses: actions/cache@v3
        with:
          path: |
            ./tests/snos/snos/build
            ./crates/contracts/build
            ./tests/fixtures/db/simple
          key: test-artifacts

      - name: Run tests w/ code coverage
        if: github.event_name == 'pull_request'
        run: |
          cargo llvm-cov nextest --no-report --all-features --workspace --exclude snos-integration-test --build-jobs 20
          cargo llvm-cov report --lcov --output-path lcov.info

      - name: Run tests
        if: github.event_name != 'pull_request'
        run: |
          cargo nextest run --all-features --workspace --exclude snos-integration-test --build-jobs 20

      - uses: codecov/codecov-action@v4
        if: github.event_name == 'pull_request'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info

  snos-integration-test:
    needs: [fmt, clippy]
    runs-on: ubuntu-latest-32-cores
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    container:
      image: ghcr.io/dojoengine/katana-dev:latest
    env:
      MLIR_SYS_190_PREFIX: /usr/lib/llvm-19/
      LLVM_SYS_191_PREFIX: /usr/lib/llvm-19/
      TABLEGEN_190_PREFIX: /usr/lib/llvm-19/
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      # Workaround for https://github.com/actions/runner-images/issues/6775
      - run: git config --global --add safe.directory "*"

      - uses: Swatinem/rust-cache@v2
        with:
          key: ci-${{ github.job }}
          shared-key: katana-ci-cache

      - name: Restore test artifacts
        uses: actions/cache@v3
        with:
          path: |
            ./tests/snos/snos/build
            ./crates/contracts/build
            ./tests/fixtures/db/simple
          key: test-artifacts

      - name: Prepare SNOS test environment
        run: |
          if [ ! -d "./tests/snos/snos/build" ]; then
            make snos-artifacts
          fi

      - run: |
          cargo run -p snos-integration-test

  explorer-reverse-proxy:
    needs: [fmt, clippy]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    container:
      image: ghcr.io/dojoengine/katana-dev:latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      # Workaround for https://github.com/actions/runner-images/issues/6775
      - run: git config --global --add safe.directory "*"
      - uses: Swatinem/rust-cache@v2
        with:
          key: ci-${{ github.job }}
          shared-key: katana-ci-cache

      - name: Restore test artifacts
        uses: actions/cache@v3
        with:
          path: |
            ./tests/snos/snos/build
            ./crates/contracts/build
            ./tests/fixtures/db/simple
          key: test-artifacts

      - uses: browser-actions/setup-chrome@v1
      - run: cargo run -p reverse-proxy-test

  # db-compatibility-check:
  #   needs: [fmt, clippy]
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ghcr.io/dojoengine/katana-dev:latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: recursive
  #     # Workaround for https://github.com/actions/runner-images/issues/6775
  #     - run: git config --global --add safe.directory "*"

  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         key: release-checks-${{ github.job }}
  #         shared-key: katana-ci-cache

  #     - name: Generate test artifacts
  #       run: make db-compat-artifacts

  #     - name: Run database compatibility check
  #       run: cargo run -p db-compat-test
